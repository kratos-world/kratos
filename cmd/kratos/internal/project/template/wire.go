package template

var (
	Wire = `// +build wireinject

// The build tag makes sure the stub is not built in the final build.

package main

import (
	"{{.ModPath}}/internal/biz"
	"{{.ModPath}}/internal/conf"
	"{{.ModPath}}/internal/data"
	"{{.ModPath}}/internal/server"
	"{{.ModPath}}/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/google/wire"
)

// initApp init kratos application.
func initApp(*conf.Server, *conf.Data, log.Logger) (*kratos.App, func(), error) {
	panic(wire.Build(server.ProviderSet, data.ProviderSet, biz.ProviderSet, service.ProviderSet, newApp))
}`

	WireGen = `// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"{{.ModPath}}/internal/biz"
	"{{.ModPath}}/internal/conf"
	"{{.ModPath}}/internal/data"
	"{{.ModPath}}/internal/server"
	"{{.ModPath}}/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	{{.SCName}}Repo := data.New{{.BCName}}Repo(dataData, logger)
	{{.SCName}}Usecase := biz.New{{.BCName}}Usecase({{.SCName}}Repo, logger)
	{{.SCName}}Service := service.New{{.BCName}}Service({{.SCName}}Usecase, logger)
	httpServer := server.NewHTTPServer(confServer, {{.SCName}}Service, logger)
	grpcServer := server.NewGRPCServer(confServer, {{.SCName}}Service, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
`
)